import com.android.build.OutputFile
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "tech.soit.quiet.app"
        minSdkVersion 21
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        setProperty("archivesBaseName", "quiet-android-v" + flutterVersionName)
    }

    signingConfigs {
        debug {
            storeFile file('keystore/github.jks')
            storePassword 'boyan01'
            keyAlias 'github'
            keyPassword 'boyan01'
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def version = variant.versionName // 版本号
            def buildType = variant.name // 包类型，debug 还是 release
            def abiName = output.getFilter(OutputFile.ABI)
//            def createTime = new Date().format('yyyy_MM_dd_HH_mm_ss') // 打包时间 2021_09_25_16_45_52
            if (abiName == null) {
                outputFileName = "quiet-android-v${version}.apk"
            } else
                outputFileName = "quiet-android-v${version}-${abiName}.apk"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
//            ndk {
//                //这里配置开发调试时的，根据个人需要增减少，x86建议加上不然部分模拟器会报错
//                abiFilters "armeabi-v7a"
////                abiFilters  "armeabi-v7a","arm64-v8a", "x86"
//            }
        }
        release {
            signingConfig signingConfigs.release
        }
    }
    splits {

        // 基于不同的abi架构配置不同的apk
        abi {

            // 必须为true，打包才会为不同的abi生成不同的apk
            enable true

            // 默认情况下，包含了所有的ABI。
            // 所以使用reset()清空所有的ABI，再使用include指定我们想要生成的架构armeabi-v7a、arm-v8a
            reset()

            // 逗号分隔列表的形式指定 Gradle 应针对哪些 ABI 生成 APK。只与 reset() 结合使用，以指定确切的 ABI 列表。
            include "armeabi-v7a", "arm64-v8a", "x86_64"

            // 是否生成通用的apk，也就是包含所有ABI的apk。如果设为 true，那么除了按 ABI 生成的 APK 之外，Gradle 还会生成一个通用 APK。
            universalApk true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core:1.3.1'
    implementation 'androidx.media:media:1.2.0'
    implementation 'com.danikula:videocache:2.7.1'
    implementation 'androidx.annotation:annotation:1.5.0'
}
